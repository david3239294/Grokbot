import {
  VMenuSymbol,
  VOverlay,
  makeVOverlayProps,
  useScopeId
} from "./chunk-H6TCAD66.js";
import {
  forwardRefs
} from "./chunk-57DMSPPY.js";
import {
  VDialogTransition
} from "./chunk-CGGGWAVJ.js";
import "./chunk-BVM5LRKQ.js";
import {
  VDefaultsProvider
} from "./chunk-QNG23R64.js";
import "./chunk-NYT3MCDM.js";
import "./chunk-EW6UXAXA.js";
import "./chunk-HVUYCE57.js";
import "./chunk-CTXDP5F3.js";
import "./chunk-JQNRWJFO.js";
import "./chunk-HKOYO4FC.js";
import {
  useProxiedModel
} from "./chunk-72YZQZVU.js";
import {
  genericComponent,
  getUid,
  omit,
  propsFactory,
  useRender
} from "./chunk-IUMJRYIR.js";
import {
  computed,
  createVNode,
  inject,
  mergeProps,
  provide,
  ref,
  shallowRef,
  watch
} from "./chunk-X424KEAX.js";
import "./chunk-RSJERJUL.js";

// node_modules/vuetify/lib/components/VMenu/VMenu.mjs
import "C:/Users/maran/OneDrive/Desktop/Simple-Chat-GPT-clone-main/Simple-Chat-GPT-clone-main/node_modules/vuetify/lib/components/VMenu/VMenu.css";
var makeVMenuProps = propsFactory({
  id: String,
  ...omit(makeVOverlayProps({
    closeDelay: 250,
    closeOnContentClick: true,
    locationStrategy: "connected",
    openDelay: 300,
    scrim: false,
    scrollStrategy: "reposition",
    transition: {
      component: VDialogTransition
    }
  }), ["absolute"])
}, "v-menu");
var VMenu = genericComponent()({
  name: "VMenu",
  props: makeVMenuProps(),
  emits: {
    "update:modelValue": (value) => true
  },
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const isActive = useProxiedModel(props, "modelValue");
    const {
      scopeId
    } = useScopeId();
    const uid = getUid();
    const id = computed(() => props.id || `v-menu-${uid}`);
    const overlay = ref();
    const parent = inject(VMenuSymbol, null);
    const openChildren = shallowRef(0);
    provide(VMenuSymbol, {
      register() {
        ++openChildren.value;
      },
      unregister() {
        --openChildren.value;
      },
      closeParents() {
        setTimeout(() => {
          if (!openChildren.value) {
            isActive.value = false;
            parent == null ? void 0 : parent.closeParents();
          }
        }, 40);
      }
    });
    watch(isActive, (val) => {
      val ? parent == null ? void 0 : parent.register() : parent == null ? void 0 : parent.unregister();
    });
    function onClickOutside() {
      parent == null ? void 0 : parent.closeParents();
    }
    const activatorProps = computed(() => mergeProps({
      "aria-haspopup": "menu",
      "aria-expanded": String(isActive.value),
      "aria-owns": id.value
    }, props.activatorProps));
    useRender(() => {
      const [overlayProps] = VOverlay.filterProps(props);
      return createVNode(VOverlay, mergeProps({
        "ref": overlay,
        "class": ["v-menu", props.class],
        "style": props.style
      }, overlayProps, {
        "modelValue": isActive.value,
        "onUpdate:modelValue": ($event) => isActive.value = $event,
        "absolute": true,
        "activatorProps": activatorProps.value,
        "onClick:outside": onClickOutside
      }, scopeId), {
        activator: slots.activator,
        default: function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          return createVNode(VDefaultsProvider, {
            "root": true
          }, {
            default: () => {
              var _a;
              return [(_a = slots.default) == null ? void 0 : _a.call(slots, ...args)];
            }
          });
        }
      });
    });
    return forwardRefs({
      id,
      \u03A8openChildren: openChildren
    }, overlay);
  }
});
export {
  VMenu
};
//# sourceMappingURL=vuetify_lib_components_VMenu_index__mjs.js.map
